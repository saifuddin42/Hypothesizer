[{"C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\src\\index.tsx":"1","C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\src\\api\\hypothesizer.ts":"2","C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\src\\api\\codeAnalyzer.ts":"3","C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\src\\api\\tempDatabase.ts":"4"},{"size":987,"mtime":1606455552502,"results":"5","hashOfConfig":"6"},{"size":6614,"mtime":1605806446000,"results":"7","hashOfConfig":"6"},{"size":3071,"mtime":1605806446000,"results":"8","hashOfConfig":"6"},{"size":4117,"mtime":1605806446000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"14zzsxl",{"filePath":"13","messages":"14","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\src\\index.tsx",["20"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/main/App';\nimport * as serviceWorker from './serviceWorker';\n// import Button from 'react-bootstrap/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Refresh from '@material-ui/icons/Refresh';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { initializeHypothesizer } from './api/devtools';\n\ninitializeHypothesizer();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Button\n      onClick={() => window.location.reload()}\n      variant=\"outlined\"\n      color=\"primary\"\n    > <Refresh/>\n    </Button>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\src\\api\\hypothesizer.ts",["21","22","23","24","25","26","27"],"C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\src\\api\\codeAnalyzer.ts",["28"],"import * as acorn from \"acorn\";\nimport * as estree from \"estree-walker\";\nimport { debug } from \"console\";\nlet jsx = require(\"acorn-jsx\");\n\n/**\n *  return  an AST for each file in the program.\n * @param files \n */\nconst constructAST = async (files: any[]) => {\n    const astList: any[] = [];\n    for (const file of files) {\n        const ast = await new Promise((resolve, _) =>\n            file.getContent((jsCode: string) => {\n                const ast: any = acorn.Parser.extend(jsx()).parse(jsCode, { ranges: false, locations: false, sourceType: \"module\" });\n                return resolve({ tree: ast, file: file.url });\n            }))\n        astList.push(ast);\n    }\n    return astList\n}\n/**\n *  return ASTs for only the code that got executed.\n * @param coverage \n * @param files \n */\nconst analyzeCode = async (coverage: any, files: string[]) => {\n    const relevantAST: Object[] = [];\n    const executionTrace: String[] = [];\n    const astList = await constructAST(files);\n    for (const ast of astList) {\n        const filename = ast.file.substring(ast.file.lastIndexOf(\"/\") + 1, ast.file.lastIndexOf(\".js\"));\n        estree.walk(ast.tree, {\n            enter: (node: any, parent: any, prop: any, index: any) => {\n                switch (node.type) {\n                    case \"ImportDeclaration\":\n                        relevantAST.push({ node, filename });\n                        break;\n                    case \"FunctionDeclaration\": {\n                        const index = coverage.findIndex((e: any) => e.functionName === node.id.name);\n                        if (index > -1) {\n                            relevantAST.push({ node, filename });\n                            executionTrace.push(`<code>${node.id.name}</code> inside <code>${filename}</code> got executed.`);\n                        }\n                    }\n                        break;\n                    case \"ArrowFunctionExpression\": {\n                        const index = coverage.findIndex((e: any) => e.functionName === node.body.callee?.name);\n                        if (index > -1) {\n                            relevantAST.push({ node, filename });\n                            executionTrace.push(`<code>${node.body.callee?.name}</code> inside <code>${filename}</code> got executed.`);\n                        }\n                    }\n                        break;\n                    case \"JSXOpeningElement\": {\n                        const index = coverage.findIndex((e: any) => {\n                             return e.functionName === node.name.name || node.attributes.find((node:any) =>  e.functionName === node.name.name)\n                            });\n                        if (index > -1) {\n                            relevantAST.push({ node, filename });\n                            executionTrace.push(`<code>${node.name.name}</code> inside <code>${filename}</code> got executed.`);\n\n                        }\n                    }\n                }\n            }\n        })\n    }\n    return [relevantAST, executionTrace];\n}\n\n\n\nexport { analyzeCode, constructAST }","C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\src\\api\\tempDatabase.ts",[],{"ruleId":"29","severity":1,"message":"30","line":7,"column":10,"nodeType":"31","messageId":"32","endLine":7,"endColumn":20},{"ruleId":"33","severity":1,"message":"34","line":23,"column":27,"nodeType":"35","messageId":"36","endLine":23,"endColumn":29},{"ruleId":"33","severity":1,"message":"34","line":23,"column":45,"nodeType":"35","messageId":"36","endLine":23,"endColumn":47},{"ruleId":"33","severity":1,"message":"37","line":23,"column":45,"nodeType":"35","messageId":"36","endLine":23,"endColumn":47},{"ruleId":"33","severity":1,"message":"37","line":23,"column":58,"nodeType":"35","messageId":"36","endLine":23,"endColumn":60},{"ruleId":"38","severity":1,"message":"39","line":66,"column":80,"nodeType":"40","messageId":"41","endLine":81,"endColumn":14},{"ruleId":"42","severity":1,"message":"43","line":138,"column":21,"nodeType":"44","messageId":"45","endLine":140,"endColumn":22},{"ruleId":"46","severity":1,"message":"47","line":157,"column":89,"nodeType":"48","messageId":"49","endLine":157,"endColumn":91},{"ruleId":"29","severity":1,"message":"50","line":3,"column":10,"nodeType":"31","messageId":"32","endLine":3,"endColumn":15},"@typescript-eslint/no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'confidence', 'confidence'.","ArrowFunctionExpression","unsafeRefs","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'debug' is defined but never used."]