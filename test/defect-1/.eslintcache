[{"C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\test\\defect-1\\src\\App.js":"1","C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\test\\defect-1\\src\\serviceWorker.js":"2","C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\test\\defect-1\\src\\ParticlesComponent.js":"3"},{"size":6667,"mtime":1605806446000,"results":"4","hashOfConfig":"5"},{"size":5086,"mtime":1605806446000,"results":"6","hashOfConfig":"5"},{"size":2374,"mtime":1605806446000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1ovd2id",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\test\\defect-1\\src\\App.js",["15","16"],"import React from 'react'\nimport './App.css'\n\nfunction Todo({ todo, index, completeTodo, unCompleteTodo, removeTodo, editTodo, setTodo, editing }) {\n  if (!editing)\n    return (\n      <div id=\"todo\" className=\"todo block text--700 text-center bg-gray-200 hover:bg-gray-400 px-4 py-2 mt-2\" style={{ backgroundColor: todo.completed ? \"#bdffcf\" : \"\" }}>\n        {todo.text}\n        <div id=\"NotTodo\">\n          {todo.completed ? <button onClick={() => unCompleteTodo(index)} className=\"bg-gray-300 hover:bg-yellow-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center transition duration-500 ease-in-out transform hover:-translate-y-1\"> Pending </button>\n            : <button onClick={() => completeTodo(index)} className=\"bg-gray-300 hover:bg-green-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center transition duration-500 ease-in-out transform hover:-translate-y-1\"> Complete </button>}\n          <button onClick={() => removeTodo(index)} className=\"bg-gray-300 hover:bg-red-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center transition duration-500 ease-in-out transform hover:-translate-y-1\"> Delete </button>\n          {/* Buggy code */}\n          <button onClick={() => editTodo} className=\"bg-gray-300 hover:bg-blue-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center transition duration-500 ease-in-out transform hover:-translate-y-1\"> Edit </button>\n        </div>\n      </div>\n    )\n  else return (\n    <EditTodo index={index} oldTodo={todo} setTodo={setTodo} />\n  )\n}\n\nfunction EditTodo({ index, oldTodo, setTodo }) {\n  const [inputVal, setInputValue] = React.useState(oldTodo.text)\n  const handleSubmit = event => {\n    event.preventDefault()\n    // if (!value) { alert('The todo must have a description.') return}\n    if (inputVal.length === 0)\n      return\n    setTodo(index, inputVal)\n  }\n  return (\n    <div className=\"w-full center\" id=\"addTodo\">\n      <form onSubmit={handleSubmit} className=\"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\">\n        <div className=\"form-group\">\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"To-do:\">\n              Editing to-do {oldTodo.value}\n            </label>\n            <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"username\" type=\"text\" placeholder=\"To-do\"\n              type=\"text\"\n              value={inputVal}\n              onChange={e => setInputValue(e.target.value)}\n            />\n          </div>\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <button type=\"submit\" className=\"bg-blue-500 text-white font-bold py-2 px-4 rounded transition duration-500 ease-in-out bg-blue-500 hover:bg-purple-500 transform hover:-translate-y-1 hover:scale-110 ...\">Save</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nfunction AddTodo({ addTodo }) {\n  const [inputVal, setInputValue] = React.useState(\"\")\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    // if (!value) { alert('The todo must have a description.') return}\n    if (inputVal.length === 0)\n      return\n    addTodo(inputVal)\n    setInputValue(\"\")\n  }\n\n  return (\n    <div className=\"w-full center\" id=\"addTodo\">\n      <form onSubmit={handleSubmit} className=\"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\">\n        <h1 style={{ textAlign: 'center' }}><strong>Add Todos</strong></h1>\n        <div className=\"form-group\">\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"To-do:\">\n              To-do:\n            </label>\n            <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"username\" type=\"text\" placeholder=\"To-do\"\n              type=\"text\"\n              value={inputVal}\n              onChange={e => setInputValue(e.target.value)}\n            />\n          </div>\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <button type=\"submit\" className=\"bg-blue-500 text-white font-bold py-2 px-4 rounded transition duration-500 ease-in-out bg-blue-500 hover:bg-green-500 transform hover:-translate-y-1 hover:scale-110 ...\">Add</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nfunction App() {\n  var initialTodoList = []\n\n  try {\n    initialTodoList = JSON.parse(window.localStorage.getItem('todoList')) || []\n  }\n  catch (err) {\n    initialTodoList = []\n  }\n\n  const [todoList, setTodoList] = React.useState(initialTodoList)\n\n  React.useEffect(() => {\n    window.localStorage.setItem('todoList', JSON.stringify(todoList))\n  })\n\n  const addTodo = text => {\n    const newTodoList = [...todoList, { text }]\n    setTodoList(newTodoList)\n  }\n\n  const completeTodo = index => {\n    const newTodoList = [...todoList]\n    newTodoList[index].completed = true\n    setTodoList(newTodoList)\n  }\n\n  const unCompleteTodo = index => {\n    const newTodoList = [...todoList]\n    newTodoList[index].completed = false\n    setTodoList(newTodoList)\n  }\n\n  const removeTodo = index => {\n    const newTodoList = [...todoList]\n    newTodoList.splice(index, 1)\n    setTodoList(newTodoList)\n  }\n\n  const editTodo = index => {\n    const newTodoList = [...todoList]\n    newTodoList[index].editing = true\n    setTodoList(newTodoList)\n  }\n\n  const setTodo = (index, text) => {\n    const newTodoList = [...todoList]\n    newTodoList.splice(index, 1, { text })\n    newTodoList[index].editing = false\n    setTodoList(newTodoList)\n  }\n\n  if (todoList.length > 0) {\n    return (\n      <div className=\"app\">\n        <div className=\"todo-list bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\">\n          <h1 style={{ textAlign: 'center' }}><strong>My Todos</strong></h1>\n          {todoList.map((todo, index) => (\n            <Todo\n              key={todo.id}\n              index={index}\n              todo={todo}\n              completeTodo={completeTodo}\n              unCompleteTodo={unCompleteTodo}\n              removeTodo={removeTodo}\n              editTodo={editTodo}\n              editing={todoList[index].editing}\n              setTodo={setTodo}\n            />\n          ))}\n        </div>\n        <AddTodo addTodo={addTodo} />\n      </div>\n    )\n  }\n  else return (\n    <div className=\"app\">\n      <div className=\"todo-list bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\" style={{ textAlign: 'center' }}>\n        No todos here. Try adding one!\n      </div>\n      <div>\n        <AddTodo addTodo={addTodo} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n//# sourceMappingURL=/src/App.js.map","C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\test\\defect-1\\src\\serviceWorker.js",[],"C:\\Users\\saifu\\Desktop\\Hypothesizer-master\\test\\defect-1\\src\\ParticlesComponent.js",[],{"ruleId":"17","severity":1,"message":"18","line":41,"column":15,"nodeType":"19","endLine":41,"endColumn":26},{"ruleId":"17","severity":1,"message":"18","line":77,"column":15,"nodeType":"19","endLine":77,"endColumn":26},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute"]